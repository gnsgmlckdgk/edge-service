plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.7-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.polarbookshop'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/snapshot' }
}

ext {
	// 상수 정의
	set('springCloudVersion', "2023.0.4")
	set('testcontainersVersion', "1.17.3")
}

dependencies {
	// 스프링 클라우드 게이트웨이 리액티브 스택 기반 ( 비리액티브 스택 기반은 뒤에 gateway-mvc 버전으로 변경, 둘 다 넣으면 충돌할 수 있음 )
	implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
	// 스프링 클라우드 컨피그
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	// 서킷브레이커
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'
	// 레디스 리액티브
	implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'

	// 테스트 컨테이너
	implementation 'org.springframework.session:spring-session-data-redis'
	testImplementation 'org.testcontainers:junit-jupiter'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		// 버전 관리
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

bootBuildImage {	// 빌드팩을 사용해 OCI 이미지를 빌드하기 위한 스프링 부트 플러그인 작업
	imageName = "${project.name}"	// 빌드할 OCI 이미지의 이름. 이 이름을 그래들의 프로젝트 설정에서 정의한 이름과 같다. 버전 번호를 사용하지 않고 암묵적인 latest 태그를 사용한다.
	environment = ["BP_JVM_VERSION" : "17.*"]	// 이미지에 설치할 JVM 버전.

	// 컨테이너 저장소 연결을 설정하기 위한 섹션
	docker {
		publishRegistry {	// 컨테이너 저장소 인증을 설정하기 위한 섹션. 값은 그래들 속성을 통해 전달된다.
			username = project.findProperty("registryUsername")
			password = project.findProperty("registryToken")
			url = project.findProperty("registryUrl")
		}
	}
}

// 의존성 찾기(목록 확인용)
// ./gradlew listDependencies
task listDependencies {
	doLast {
		println "\nAll dependencies:"
		configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts.each { artifact ->
			def id = "${artifact.moduleVersion.id.group}:${artifact.moduleVersion.id.name}"
			println " - $id"
		}
	}
}

// 의존성 있는지 체크
// ./gradlew checkDependencies
task checkDependencies {
	doLast {
		println "\nAll resolved dependencies:"
		configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts.each { artifact ->
			def module = artifact.moduleVersion.id
			println "${module.group}:${module.name}:${module.version}"
		}

		def targetDependencies = [
				'org.springframework.session:spring-session-data-redis',
				'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'
		]

		println "\nChecking for target dependencies:"
		targetDependencies.each { target ->
			def found = configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts.find { artifact ->
				def module = artifact.moduleVersion.id
				"${module.group}:${module.name}" == target
			}
			println "${target}: ${found ? 'Found' : 'Not Found'}"
			if (found) {
				println "  Location: ${found.file}"
			}
		}
	}
}

// 의존성이 실제로 어디에 존재하는지 확인
// ./gradlew findDependencyFiles
task findDependencyFiles {
	doLast {
		println "\nSearching in Gradle cache:"
		println "Cache location: ${project.gradle.gradleUserHomeDir}/caches/modules-2/files-2.1"

		fileTree(project.gradle.gradleUserHomeDir).matching {
			include "**/caches/modules-2/files-2.1/**/*.jar"
			include "**/caches/modules-2/files-2.1/**/*.pom"
		}.each { file ->
			println "Found: ${file}"
		}
	}
}

// 특정 의존성 다운로드(하위 의존성 포함)
// ./gradlew clean
// ./gradlew downloadForMavenRepo --info
task downloadForMavenRepo {
	doLast {
		def specificDependencies = [
				'org.springframework.session:spring-session-data-redis',
				'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'
		]
		println "복사 대상 의존성 = [${specificDependencies}]"

		def targetDir = layout.buildDirectory.dir("maven-repo").get().asFile
		targetDir.mkdirs()
		println "\n디렉토리 생성 완료 [${targetDir}]"

		// 지정한 의존성들의 전체 의존성 트리 수집
		def allDependencies = new HashSet()

		configurations.runtimeClasspath.resolvedConfiguration.firstLevelModuleDependencies.findAll { dep ->
			def id = "${dep.moduleGroup}:${dep.moduleName}"

			println "\n현재 의존성 정보(ID): $id"
			println "복사대상 의존성 매칭 결과: ${specificDependencies.any { it == id }}"

			specificDependencies.any { it == id }

		}.each { dep ->
			println "의존성 하위 의존성 정보 검색 시작 [${dep}]"
			collectDependencies(dep, allDependencies)
		}

		println "\n검색한 의존성 정보들(allDependencies) [${allDependencies}]"
		allDependencies.each { dep ->
			def pomPath = "${dep.moduleGroup.replace('.', '/')}/${dep.moduleName}/${dep.moduleVersion}"

			// jar 파일 복사
			copy {
				from dep.moduleArtifacts.find { it.type == 'jar' }?.file
				into "${targetDir}/${pomPath}"
			}

			// pom 파일 복사
			fileTree(project.gradle.gradleUserHomeDir).matching {
				include "caches/modules-2/files-2.1/**/${dep.moduleName}-${dep.moduleVersion}.pom"
			}.each { pomFile ->
				copy {
					from pomFile
					into "${targetDir}/${pomPath}"
				}
			}
		}
	}
}

def collectDependencies(dep, collected) {
	if (!collected.contains(dep)) {
		collected.add(dep)
		println "하위 의존성정보 추가 ${dep}"
		dep.children.each { child ->
			collectDependencies(child, collected)
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
