server:
  port: 9000
  netty:
    connection-timeout: 2s    # 서버와 TCP 연결을 수립하기까지 기다리는 시간
    idle-timeout: 15s    # 데이터가 전송되지 않는 경우 TCP 연결을 끊기 전에 기다리는 시간
  shutdown: graceful    # 우아한 종료 활성화

spring:
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s # 우아한 종료 기간을 15초로 설정
  # 세션 설정
  session:
    store-type: redis
    timeout: 10m
    redis:
      namespace: polar:edge

  # 컨피그 서버 클라이언트 설정
  config:
    import: "optional:configserver:"  # 가능하면 컨피그 서버에서 설정 데이터를 가져온다.

  cloud:
    # 컨피그 서버 클라이언트 설정
    config:
      uri: http://localhost:8888  # 설정 서버의 URL
      request-connect-timeout: 30000 # 30s, 설정 서버에 연결될 때까지 기다리는 시간(밀리초)
      request-read-timeout: 30000  # 30s, 설정 서버에서 설정 데이터를 읽을 때까지 기다리는 시간(밀리초)
      fail-fast: false # 설정 서버 연결 실패를 치명적 오류로 인식[true 여야지 재시도가 작동한다.]
      retry:
        max-attempts: 10 # 시도의 최대 횟수
        initial-interval: 1000  # 최초 재시도 지연시간(밀리초)
        max-interval: 5000  # 재시도 지연 최대 시간(밀리초)
        multiplier: 1.1 # 지연 시간 계산 승수
    # 게이트웨이 설정
    gateway:
      default-filters:  # 기본 필터 목록
        #- SaveSession # 요청을 서비스로 전달하기 전에 세션 데이터를 저장한다.
        - name: Retry # 필터 이름, 재시도설정
          args:
            retries: 3  # 최대 3회의 재시도
            method: GET # GET 요청만 재시도
            series: SERVER_ERROR  # 5xx 에러에 대해서만 재시도
            exceptions: java.io.IOException,
              java.util.concurrent.TimeoutException # 지정한 예외가 발생할 때만 재시도
            backoff:  # 재시도는 firstBackoff* (factor^n) 공식을 사용해 계산
              firstBackoff: 50ms
              maxBackOff: 500ms
              factor: 2
              basedOnPreviousValue: false
        - name: RequestRateLimiter  # 요청제한설정
          args:
            redis-rate-limiter:
              replenishRate: 10 # 초당 버킷에 떨어지는 토큰의 수
              burstCapacity: 20 # 최대 20개의 요청까지 허용
              requestedTokens: 1  # 하나의 요청 처리에 몇 개의 토큰이 사용되는지 지정

      httpclient: # HTTP 클라이언트에 대한 설정 속성
        connect-timeout: 2000 # 연결을 수립하기까지의 타임아웃(밀리초)
        response-timeout: 5s  # 응답을 받을 때까지의 타임아웃(기간)
        pool:
          type: elastic # 연결 풀 유형(elastic, fixed, disabled 중 하나)
          max-idle-time: 15s  # 통신 채널이 닫히기 전 대기하는 시간
          max-life-time: 60s  # 통신 채널이 열려 있는 기간
      routes: # 라우트 정의 목록
        - id: catalog-route # 라우트 ID
          uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books
          predicates:
            - Path=/books/**  # 일치하는 경로를 술어로 사용한다.
          filters:
            - name: CircuitBreaker  # 필터 이름
              args:
                name: catalogCircuitBreaker # 서킷브레이커 이름
                fallbackUri: forward:/catalog-fallback  # 회로가 개방 상태일 때 요청을 이 URI 로 전달
        - id: order-route
          # URI 값은 환경 변수로부터 오거나 해당 환경 변수가 없는 경우 기본값을 사용한다.
          uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders
          predicates:
            - Path=/orders/**
          filters:
            - name: CircuitBreaker  # 서킷블레이커에 대해 정의한 폴백 없음
              args:
                name: orderCircuitBreaker

  # 컨피그 서버 클라이언트 설정 ---------------------------------------------------------------------------
  management:
    endpoints:
      web:
        exposure:
          include: refresh  # HTTP를 통해 /actuator/refresh 엔드포인트를 노출한다.[ 컨피그 서버 설정 가져와 새로 적용 ]

  # 레디스
  redis:
    connect-timeout: 2s # 연결이 수립되기까지 기다리는 시간
    host: localhost # 레디스 호스트 기본값
    port: 6379  # 레디스 포트 기본값
    timeout: 1s # 응답을 받기까지 기다리는 시간의 한도

resilience4j:
  circuitbreaker:
    configs:
      default:  # 모든 서킷 브레이커에 대한 기본 설정
        slidingWindowSize: 20 # 회로가 폐쇄된 상태일 때 호출의 결과를 기록하는데 사용하는 슬라이딩 윈도의 크기
        permittedNumberOfCallsInHalfOpenState: 5  # 회로가 반개방 상태일 때 허용되는 호출의 수
        failureRateThreshold: 50  # 실패율이 임계값 이상이면 회로는 개방 상태로 바뀐다.
        waitDurationInOpenState: 15000  # 개방 상태에서 반개방 상태로 가기까지 기다릴 시간(밀리초)
  timelimiter:
    configs:
      default:  # 모든 시간 제한에 대한 기본 설정
        timeoutDuration: 5s # 타임아웃 설정(초)

logging:
  level:
    io.github.resilience4j: DEBUG